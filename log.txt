log:

* Implemented noun morphology following HJK
   - worst case constructor 6 forms
   - Finnish worst case constructor 10 forms
* Verb morphology
   - Regular internal representation 4 forms
   - 25 irregular verbs that need 8 forms
   - 2 irregular verbs defined separately
   - Finnish worst case constructor 12 forms
   
Other changes
   - Removed question particles from the category of verbs
   - Removed possessive suffix from nouns and dets
   - Removed vowel harmony features
   - Added "oma" possessive to Extra
   - Removed CompPartAP from Extra: copula complement is in nominative    CompPartAP : AP -> Comp ; -- kahvi on valmista
   - To remove from Extra:
    	- Particles (-han, -pa etc.)
    	- Word orders with focused member
   	- PartCN?
   	- 
   - To add:
   	- püsiühendid
        - negation "pole" to Extra


Inari 29.8.2013

TS classification are not always very logical. For instance, 49 is one class which I split in three 1-argument functions: saama~saada ; jooma~juua ; käima~käia. (I could of course just do more matching inside the ``Str -> VForms`` function. Maybe this detail is not so important anyway.)
Classes 50-52 are identical. Stem that you get from ma infinitive doesn't change, you just add suffixes.
Classes 55-57 are identical, just the details of consonant gradation differ. 55 is pp~p, 56 is nd~nn, 57 is lugema~loeb or pidama~peab. 
Class 61 contains both a and e (laulab, kooleb), and you don't know that from ma infinitive.
I merged 62 and 64, because the only difference is that other has consonant gradation and other doesn't. So you can give instruction ``X_weak + "suffix"``, and if X can't be made weaker, it has no effect.

Inari 1.9.2013

Paradigm from a CS point of view and a linguistic point of view; 
definition of (Aarne & Gregoire smart paradigms paper http://www.aclweb.org/anthology/E/E12/E12-1066.pdf); paradigm is a function that you apply to one form to give you n forms, that is, the full inflection table of a lemma. If you consider it as an instruction, 62 and 64 are in the same class: applying the same procedure gives the full inflection table for all words that belong to the TS classes 62 and 64. 
If you consider it as a description, it is more justified to separate the classes. One contains consonant gradation, other doesn't.
Difference between classes 51 and 55-57 is that 51 does not undergo consonant gradation, 55-57 do. They aren't implemented in the same smart paradigm, because verbs 51 could potentially undergo it; that is, applying function ``weaker`` to stems of 51 verbs would transform them and that would result in incorrect forms.

With nouns, we use the HJK (http://kjk.eki.ee/ee/issues/2012/6/156) system, where the full inflection table of a noun can be formed by 6 forms. What is then left to do for the GF smart paradigms is how to form the 6 forms from one.
With verbs the number of forms for forming the full paradigm is 8 -- this is enough for all verbs except _olema_ and _minema_, which are just formed separately. With the assumption that 6 and 8 forms are enough to compute all other forms, we have reduced the immediate problem to finding 6/8 forms based on one.

An example of the template for verbs in TS 63.
The suffixes are fixed; you couldn't produce for instance any verb that has the vowel _e_ in the present tense personal forms, or imperative with the allomorph _ge_.
Second thing is that you can't form a verb whose stem behaves differently. For instance, the verbs _õppima_ and _hüppama_ have different quantities in present tense forms (_õpib_ and _hüppab_), so you can't describe the process that happens in the stem in the same function. 
These are both very intuitive definitions; behaviour and instructions coincide.

  -- TS 63 (andma, murdma, hoidma) 
  cAndma : Str -> VForms = \andma ->
    let
      and = tk 2 andma ;   --murd(ma), hoid(ma)
      an = tk 1 and ;      --mur(d),   hoi(d)
      ann = weaker and ;   --murr,     hoi
    in vForms8
      andma
      (and + "a")
      (ann + "ab")
      (an + "takse")
      (and + "ke")
      (and + "is")
      (and + "nud")
      (an + "tud") ;

Kaarel 5.9.2013

Tested the 1-arg noun paradigm.

  1. Took all nouns from the Estonian WordNet: 65214
  2. Applied Filosoft compound splitting to them
  3. Removed 24262 nouns for which compound splitting failed (Filosoft tag ####)
     TODO: investigate why is this number so large
  4. For the remaining words, removed everything up to the last compound part.
     After sort|uniq, this resulted in 17983 words (non-compounds are also included)
  5. Applied Filosoft morph. generation
  6. Removed words for which generation failed (Filosoft tag ####), resulting in 17551 words
  7. Applied "recode latin1..utf8" which fixed 3 encoding errors that crashed (?) GF (TODO: report this to Filosoft)
     hea, hea, head, heasse, heade, häid
     make-up, make-upi, make-upi, make-upisse|make-upi, make-upide, make-upu|make-upisid
     pea, pea, pead, peasse|pähe, peade, päid
  8. Ran GF's cc on the sg nom forms, something like:

     cat nouns.6forms.csv | sed "s/,.*//" | ./cc.py -r HjkEst.gf --oper "hjk_type" |\
     gf --run | perl -nal -F",\s+" -e 'print "$F[0], $F[1], $F[2], $F[3], $F[15], $F[16]"'

  9. Compared the output against the Filosoft original file using diff-list-set.py,
     resulting in this difference distribution (e.g. 5-6 means that only the plural forms are wrong)

      13853
       1507 2-3-4-5-6
        524 3-5-6
        425 3-4-5-6
        267 2-3-4-5
        251 5-6
        219 2
        186 6
        112 2-4-6
         58 3
         55 2-4-5-6
         50 2-3-5-6
         32 2-4
          9 3-5
          1 4-6
          1 2-3-4-6
          1 2-3-4

So, about 79% of the nouns are currently handled correctly.

Inari 5.9.

1) Added particle verbs. Added a s2 field for Verb, and used the pre-existing ext field in VP for the particle.

Clauses with verb complement require an inverted word order. Modified the function infVP (ResEst) to handle that. ComplVV calls infVP, which inverts the word order for the complement VP, and puts it into the resulting VP's complement field. This happens to all cases with auxiliary, but not with negation:

  * mina saan sinust aru
  * mina ei saa sinust aru
  * mina tahan sinust aru saada
  
Added also a third SType, SInv, for forming inverted word order in mkClause (ResEst).
SInv made by mkClause may be needed for cases where you just need to construct an inverted word order, for whichever pragmatic reason, and then call it from some other place, e.g. application grammar or ExtraEst function.

2) Started testing the syntax. Copied exx-resource.gfs from GF main repo, testsuite/libraries. Now exx-resource.gfs.gold is just the output, TODO correct that and diff after changing something.

Inari 8.9.

Tested the 1-arg verb paradigm.

  1. Took (all?) verbs from the Estonian WordNet: 7845
  2. Excluded 587 verbs for which generation failed (Filosoft tag ####)
  3. Excluded 1282 compound verbs (e.g. 'kinni hoidma'), resulting in 5976 words 
  4. Ran GF's cc on the ma forms, same procedure as for nouns:
       
       cat verbs.8forms.csv | sed "s/,.*//" |\
       python cc.py -r /ParadigmsEst.gf --oper "mkV" |\
       gf --run |\
       perl -nal -F",\s+" -e 'print "$F[2], $F[0], $F[9], $F[31], $F[26], $F[15], $F[36], $F[65]"'

  5. Compared the output against the Filosoft original file using diff-list-set.py, resulting in this difference distribution (e.g. 4-8 means that passive present and passive participle are wrong.)

forms:  1 = ma   2 = da   3 = b   4 = takse
        5 = ge   6 = s    7 = nud   8 = tud         

   5262
    240 3-4-8
    198 7
    101 2-5
     90 2-4-5-7-8
     47 2-4-5-8
      9 3
      8 4-8
      7 6
      6 2-4-6-8
      3 2-3-4-5-6-7-8
      2 2-4-8
      2 2-3-4-6-8
      1 4-6-8
      1 2-4-6
      
88 % of the verbs get correct parse for 1-arg smart paradigm.
