log:

* Implemented noun morphology following HJK
   - worst case constructor 6 forms
   - Finnish worst case constructor 10 forms
* Verb morphology
   - Regular internal representation 4 forms
   - 25 irregular verbs that need 8 forms
   - 2 irregular verbs defined separately
   - Finnish worst case constructor 12 forms
   
Other changes
   - Removed question particles from the category of verbs
   - Removed possessive suffix from nouns and dets
   - Removed vowel harmony features
   - Added "oma" possessive to Extra
   - Removed CompPartAP from Extra: copula complement is in nominative    CompPartAP : AP -> Comp ; -- kahvi on valmista
   - To remove from Extra:
    	- Particles (-han, -pa etc.)
    	- Word orders with focused member
   	- PartCN?
   	- 
   - To add:
   	- püsiühendid
        - negation "pole" to Extra


Inari 29.8.2013

TS classification are not always very logical. For instance, 49 is one class which I split in three 1-argument functions: saama~saada ; jooma~juua ; käima~käia. (I could of course just do more matching inside the ``Str -> VForms`` function. Maybe this detail is not so important anyway.)
Classes 50-52 are identical. Stem that you get from ma infinitive doesn't change, you just add suffixes.
Classes 55-57 are identical, just the details of consonant gradation differ. 55 is pp~p, 56 is nd~nn, 57 is lugema~loeb or pidama~peab. 
Class 61 contains both a and e (laulab, kooleb), and you don't know that from ma infinitive.
I merged 62 and 64, because the only difference is that other has consonant gradation and other doesn't. So you can give instruction ``X_weak + "suffix"``, and if X can't be made weaker, it has no effect.

Inari 1.9.2013

Paradigm from a CS point of view and a linguistic point of view; 
definition of (Aarne & Gregoire smart paradigms paper http://www.aclweb.org/anthology/E/E12/E12-1066.pdf); paradigm is a function that you apply to one form to give you n forms, that is, the full inflection table of a lemma. If you consider it as an instruction, 62 and 64 are in the same class: applying the same procedure gives the full inflection table for all words that belong to the TS classes 62 and 64. 
If you consider it as a description, it is more justified to separate the classes. One contains consonant gradation, other doesn't.
Difference between classes 51 and 55-57 is that 51 does not undergo consonant gradation, 55-57 do. They aren't implemented in the same smart paradigm, because verbs 51 could potentially undergo it; that is, applying function ``weaker`` to stems of 51 verbs would transform them and that would result in incorrect forms.

With nouns, we use the HJK (http://kjk.eki.ee/ee/issues/2012/6/156) system, where the full inflection table of a noun can be formed by 6 forms. What is then left to do for the GF smart paradigms is how to form the 6 forms from one.
With verbs the number of forms for forming the full paradigm is 8 -- this is enough for all verbs except _olema_ and _minema_, which are just formed separately. With the assumption that 6 and 8 forms are enough to compute all other forms, we have reduced the immediate problem to finding 6/8 forms based on one.

An example of the template for verbs in TS 63.
The suffixes are fixed; you couldn't produce for instance any verb that has the vowel _e_ in the present tense personal forms, or imperative with the allomorph _ge_.
Second thing is that you can't form a verb whose stem behaves differently. For instance, the verbs _õppima_ and _hüppama_ have different quantities in present tense forms (_õpib_ and _hüppab_), so you can't describe the process that happens in the stem in the same function. 
These are both very intuitive definitions; behaviour and instructions coincide.

  -- TS 63 (andma, murdma, hoidma) 
  cAndma : Str -> VForms = \andma ->
    let
      and = tk 2 andma ;   --murd(ma), hoid(ma)
      an = tk 1 and ;      --mur(d),   hoi(d)
      ann = weaker and ;   --murr,     hoi
    in vForms8
      andma
      (and + "a")
      (ann + "ab")
      (an + "takse")
      (and + "ke")
      (and + "is")
      (and + "nud")
      (an + "tud") ;

Kaarel 5.9.2013

Tested the 1-arg noun paradigm.

  1. Took all nouns from the Estonian WordNet: 65214
  2. Applied Filosoft compound splitting to them
  3. Removed 24262 nouns for which compound splitting failed (Filosoft tag ####)
     TODO: investigate why is this number so large
  4. For the remaining words, removed everything up to the last compound part.
     After sort|uniq, this resulted in 17983 words (non-compounds are also included)
  5. Applied Filosoft morph. generation
  6. Removed words for which generation failed (Filosoft tag ####), resulting in 17551 words
  7. Applied "recode latin1..utf8" which fixed 3 encoding errors that crashed (?) GF (TODO: report this to Filosoft)
     hea, hea, head, heasse, heade, häid
     make-up, make-upi, make-upi, make-upisse|make-upi, make-upide, make-upu|make-upisid
     pea, pea, pead, peasse|pähe, peade, päid
  8. Ran GF's cc on the sg nom forms, something like:

     cat nouns.6forms.csv | sed "s/,.*//" | ./cc.py -r HjkEst.gf --oper "hjk_type" |\
     gf --run | perl -nal -F",\s+" -e 'print "$F[0], $F[1], $F[2], $F[3], $F[15], $F[16]"'

  9. Compared the output against the Filosoft original file using diff-list-set.py,
     resulting in this difference distribution (e.g. 5-6 means that only the plural forms are wrong)

      13853
       1507 2-3-4-5-6
        524 3-5-6
        425 3-4-5-6
        267 2-3-4-5
        251 5-6
        219 2
        186 6
        112 2-4-6
         58 3
         55 2-4-5-6
         50 2-3-5-6
         32 2-4
          9 3-5
          1 4-6
          1 2-3-4-6
          1 2-3-4

So, about 79% of the nouns are currently handled correctly.

Inari 5.9.

1) Added particle verbs. Added a s2 field for Verb, and used the pre-existing ext field in VP for the particle.

Clauses with verb complement require an inverted word order. Modified the function infVP (ResEst) to handle that. ComplVV calls infVP, which inverts the word order for the complement VP, and puts it into the resulting VP's complement field. This happens to all cases with auxiliary, but not with negation:

  * mina saan sinust aru
  * mina ei saa sinust aru
  * mina tahan sinust aru saada
  
Added also a third SType, SInv, for forming inverted word order in mkClause (ResEst).
SInv made by mkClause may be needed for cases where you just need to construct an inverted word order, for whichever pragmatic reason, and then call it from some other place, e.g. application grammar or ExtraEst function.

2) Started testing the syntax. Copied exx-resource.gfs from GF main repo, testsuite/libraries. Now exx-resource.gfs.gold is just the output, TODO correct that and diff after changing something.

Inari 8.9.

Tested the 1-arg verb paradigm.

  1. Took (all?) verbs from the Estonian WordNet: 7845
  2. Excluded 587 verbs for which generation failed (Filosoft tag ####)
  3. Excluded 1282 compound verbs (e.g. 'kinni hoidma'), resulting in 5976 words 
  4. Ran GF's cc on the ma forms, same procedure as for nouns:
       
       cat verbs.8forms.csv | sed "s/,.*//" |\
       python cc.py -r /ParadigmsEst.gf --oper "mkV" |\
       gf --run |\
       perl -nal -F",\s+" -e 'print "$F[2], $F[0], $F[9], $F[31], $F[26], $F[15], $F[36], $F[65]"'

  5. Compared the output against the Filosoft original file using diff-list-set.py, resulting in this difference distribution (e.g. 4-8 means that passive present and passive participle are wrong.)

forms:  1 = ma   2 = da   3 = b   4 = takse
        5 = ge   6 = s    7 = nud   8 = tud         

   5262
    240 3-4-8
    198 7
    101 2-5
     90 2-4-5-7-8
     47 2-4-5-8
      9 3
      8 4-8
      7 6
      6 2-4-6-8
      3 2-3-4-5-6-7-8
      2 2-4-8
      2 2-3-4-6-8
      1 4-6-8
      1 2-4-6
      
88 % of the verbs get correct result from 1-arg smart paradigm.

Inari 9.9.
----------

Fixed consonant gradation patterns; only frequent and stable in weaker, irregular patterns in MorphoEst opers.
      
   5567
    139 3-4-8
    130 2-4-5-7-8
     99 2-5
     11 3
     10 4-8
      7 6
      6 2-4-6-8
      2 2-4-8
      2 2-3-4-6-8
      2 2-3-4-5-6-7-8
      1 4-6-8
      1 2-4-6


Kaarel 10.09
------------

Tested adjectives in the same way as nouns but without compound splitting.
Improved the handling of -ne words (40% of the adjectives).

Adjectives:

   4272
    418 2-3-4-5-6
    368 3-5-6
    138 6
     60 2-4-6
     19 2-4-5-6
     14 5-6
     10 2-3-4-5
      5 3-5
      1 3
      1 2
Coverage: 4272 out of 5306 = .8051

Nouns:

  15681
    605 2-3-4-5-6
    258 2-3-4-5
    201 5-6
    128 3-5-6
     90 2-4-6
     85 6
     51 2-4-5-6
     33 3-4-5-6
     31 2-4
     28 3
     13 2
      3 3-5
      1 5
      1 4-6
      1 2-3-4
Coverage: 15681 out of 17210 = .9111


Kaarel 10.09
------------

Tested on a larger set of nouns (+4500). Previous set excluded õäöüšž-nouns
because forgot to use the "-cio utf8" flag. Somehow didn't notice this before...

  19695
    816 2-3-4-5-6
    357 2-3-4-5
    257 5-6
    168 3-5-6
    135 2-4-6
    118 6
     89 2-4-5-6
     40 3-4-5-6
     36 3
     36 2-4
     19 2
      5 3-5
      3 2-3-4
      1 5
      1 4-6
Coverage: 19695 out of 21776 = .9044


Inari 13.9.
-----------

Testing [1-4]-arg mkVs

1-arg:
   5411
    201 2-4-5-7-8
    200 2-5
    134 3-4-8
      9 4-8
      7 3
      5 6
      2 2-4
      2 2-3-4-6-8
      2 2-3-4-5-6-7-8
      1 2-4-8
      1 2-4-6-8
      1 2-4-5-6-7-8      
Coverage: 5411 out of 5976 = .9054

2-arg:
   5770
    134 3-4-8
     40 2-4-5-7-8
      9 4-8
      6 3
      5 6
      3 2-3-4-6-8
      2 2-4
      2 2-3-4-5-8
      1 3-6-7
      1 2-4-8
      1 2-4-6-8      
Coverage: 5770 out of 5976 = .9655

3-arg:
   5873
     40 2-4-5-7-8
     17 2-4-8
     10 4-8
      8 2-4-5-6-8
      6 2-4-6-8
      5 3-4-8
      4 2-4-5-6-7-8
      2 6
      2 4-6-8
      2 4-5-8
      2 3
      2 2-4-5-8
      2 2-3-4-6-8
      1 3-6-7      
Coverage: 5873 out of 5976 = .9827

4-arg:
   5960
      6 5-6-7-8
      4 6
      4 5-7-8
      1 3-6-7
      1 3
Coverage: 5960 out of 5976 = .9973

16 verbs out of 5976 need a 8-arg constructor.

EKK09 says that all except the named 27 verbs can be formed from 4 forms; ma, da, b, takse (http://www.eki.ee/books/ekk09/index.php?p=3&p1=5&id=227).

1. Possibe counterexamples? 

a) Forming the imperfect forms from ma stem 

  jooksma : 62
  jooks/ma, joos/ta, jooks/eb, joos/takse
	Impf Sg P3 => jooks/is

  maitsma : 62
  maits/ma, maits/ta, maits/eb, maits/takse
	Impf Sg P3 => maits/es
	
The choice of vowel (e/i) is not obvious from any of the 4 forms.
	
b) Forming the past participle (nud) from da
  
  jooksma : 62
  jooks/ma, joos/ta, jooks/eb, joos/takse
	PastPartAct Sg Nom => joos/nud 
	
  laskma : 64
  lask/ma, las/ta, las/eb, las/takse
	PastPartAct Sg Nom => lask/nud 

Verbs that end in -kma, actually the past participle is formed with ma stem, not da stem.	
  
2) In a lexicon there are compound verbs that have these as bases; for example, `looma' and `taaslooma' in WordNet. So the real number of verbs not covered by 1-4 arg smart paradigms can be more than 27.

Inari 17.9.
-----------

Added a field to VP and Clause; found out that the ext field is used for relative clause, so I added a new field `part' for particles. Behaviour hasn't changed.

* Word order: currently produces this

I want to answer to you that I have a cat
mina tahan sinule vastata et minul on kass

I want to answer to you that I have always wanted to see a cat
mina tahan sinule vastata et mina olen tahtnud kassi näha alati

* Complement cases

examples with which to test e.g. here http://eap.ee/public/va_lu/ling-2006-4-2.pdf 

Correct obj case (same as Finnish)
I have seen a baby
mina olen näinud beebi
I haven't seen a baby
mina ei ole näinud beebit

Incorrect (should be nominative in plural also)
I have a good friend
minul on hea sõber
I have good friends
minul on heasid sõbereid

Inari 22.9.
-----------

1) Cases where modifiers don't agree with head: essive, comitative, abessive and terminative. Fixed this in NounEst functions DetCN and AdjCN, and QuestionEst function IdetCN.

Lang> p -cat=NP "two big cats" | l -all
  kaks suurt kassi
  kahe suure kassi
  kahte suurt kassi
  kahte suurde kassi
  kahes suures kassis
  kahest suurest kassist
  kahele suurele kassile
  kahel suurel kassil
  kahelt suurelt kassilt
  kaheks suureks kassiks
  kahe suure kassina (not *kahena suurena kassina)
  kahe suure kassini (etc.)
  kahe suure kassita
  kahe suure kassiga

2) Intending to get rid of all inflected participial forms in verbs.

Added new VForms `PastPartAct' and `PastPartPass' instead of old `PastPart(Act|Pass) AForm'.
Consequently, had to change the following functions:

  ResEst.gf
    oper predV
    ...
        part  : Str = case vi of {
          VIPass => verbs ! PastPartPass (AN (NCase agr.n Nom)) ; 
          _      => verbs ! PastPartAct  (AN (NCase agr.n Nom))
          
Just changed these to PastPartPass and PastPartAct.
There is no number distinction anyway, and it is by default nominative.

  NounEst.gf
  
  Originally
    PPartNP np v2 = {
      s = \\c => np.s ! c ++ v2.s ! PastPartPass (AN (NCase (complNumAgr np.a) Ess)) ;
      a = np.a ;
      isPron = np.isPron
      } ;
      
  After change
    PPartNP np v2 =
      let 
        num : Number     = complNumAgr np.a ;
        part : Str       = v2.s ! PastPartPass ; 
        adj : CommonNoun = nhn (sMaakas part) ; 
        partEssive : Str = adj.s ! (NCase num Ess)
      in {
        s = \\c => np.s ! c ++ partEssive ;
        a = np.a ;
        isPron = np.isPron 
      } ;

So we do the computing of case in this function. Seems better than carry 29 inflected forms per each participle in the verb's inflection table.
Question: is this even a good construction? Sounds weird already in Finnish.
Problem: it doesn't work. 
  Internal error in Compute.ConcreteNew:
    Applying Predef.tk: Expected a value of type String, got VS (VP (VGen 1 []) (LIdent "s")) (VCApp (IC "ResEst",IC "PastPartPass") [])

Another question: I've seen these kinds of constructions, where the adjective formed from a participle doesn't agree with the noun, in any case.

  [Istutatud puudel] tuleb [saastunud õhus] kasvada.
  (...) mida ma [mingitest loetud teostest] arvan (...)
  
Should this be in the grammar? Do the inflected forms appear as modifiers at all? As adverbials yes (e.g. "sinu nimi erinevatesse keeltesse kirjutatuna").

3) Some random testing about object cases, TODO are these correct? 

  three books are eaten    three books aren't eaten
  kolme raamatut süüakse   kolme raamatut ei sööda

  three books have been eaten     three books haven't been eaten
  kolme raamatut ollakse söödud   kolme raamatut ei ole söödud
  
  read a book        don't read a book
  loe raamat         ära loe raamatut
  
  read three books   don't read three books
  loe kolm raamatut  ära loe kolme raamatut


4) Some word order changes in (ResEst) infVP and mkClause, to make "kassi tahtnud näha" -> "kassi näha tahtnud". 
Also changed the place of negation in ResEst.predV: now the grouping is [ei ole] [tahtnud] or [ei taha] [näha]. 
For "ei ole (midagi) näha tahtnud", the verb "näha" is placed into the `compl' field of the VP in previous infVP call. So [ei ole] midagi näha [tahtnud].

Some examples of word orders that mkClause produces.
                   näen
                   ei taha
                   tahan             sind              näha
                   saan              sinust     aru    0
         ma        olen     täna     sinust     aru    saanud                 
declCl = c.subj ++ c.fin ++ c.adv ++ c.compl ++ c.p ++ c.inf ++ c.ext ;

                                  [sind näha]  0      tahtnud  
        täna     olen     ma        sinust     aru    saanud
invCl = c.adv ++ c.fin ++ c.subj ++ c.compl ++ c.p ++ c.inf ++ c.ext 

How about sentences that are inverted this way?

	kui palju   sul    (täna)? aega          on olnud/olnud on?
???Cl = question ++ subj ++ adv ++ compl ++ p ++ fin++inf/inf++fin ++ ext

Lang> p "how many cats do I have" | l
how many cats do I have
kui palju kassi minul on

Is this also acceptable?

5) Changed the name of the part field to p, because the Finnish grammar also has it as p. 
In addition, `part' is already used as an abbreviation for participle and partitive.

_______

6) For the lulz: a quote by John McWhorter from his book Linguistic simplicity and complexity (books.google.se/books?isbn=1934078379).

"Importantly, I have by no means chosen the most baroque comparison possible. Partitive marking in Finnish's close sister Estonian is so much more elaborate in terms of complex interaction with its notoriously complex consonant gradations plus rampant irregularity that its very learnability seems almost questionable."


Inari 25.9.
-----------
1) Created test cases for word order; see tests/wordorder.gfs

2) Added a field to A and AP to show whether it inflects as a modifier.

    A  = {s : Degree => AForm => Str ; infl : Bool} ;
    AP = {s : Bool => NForm => Str   ; infl : Bool} ;     

ParadigmsEst.mkA: if no infl specified, by default mkA builds an inflecting adjective.

    mkA : N -> A = \n -> noun2adjDeg n ** {infl = True} ;
    mkA : N -> Bool -> A = \n,infl -> noun2adjDeg n ** {infl = infl} ;

NounEst.AdjCN checks whether the AP inflects or not, and chooses the right form. 

   AdjCN ap cn = {
      s = \\nf => 
        case ap.infl of {
          False => ap.s ! True ! (NCase Sg Nom) ++ cn.s ! nf ;
          True => case nf of { ...} 
          } 
seotud maja     seotud majad
seotud maja     seotud majade
seotud maja     seotud majasid
seotud majasse  seotud majadesse
seotud majas    seotud majades
seotud majast   seotud majadest
seotud majale   seotud majadele
seotud majal    seotud majadel
seotud majalt   seotud majadelt
seotud majaks   seotud majadeks
seotud majana   seotud majadena
seotud majani   seotud majadeni
seotud majata   seotud majadeta
seotud majaga   seotud majadega


Kaarel 26.09
------------

Went through the Lexicon and tagged two adjectives ('full' and 'ready')
as non-inflecting.

Added oper "N -> Str -> Str -> Bool" which supports the comparison forms.
The implementation of this oper is a bit hackish, due to the fact that
I still don't have complete understanding of lock fields.

Also found two bugs.

1. TODO: fix coordination which still applies the inflection.

Lang> p -cat=NP "valmis kassidena"
OK

Lang> p -cat=NP "valmiste kassidena"
OK: The parser failed at token "kassidena"

Lang> p -cat=NP "valmis ja suurte kassidena"
The parser failed at token "kassidena"
TODO: Should not fail.

Lang> p -cat=NP "valmiste ja suurte kassidena"
TODO: Should fail.

2. TODO: fix: in comparative/superlative the adjective should start inflecting again:

Lang> p -cat=NP "valmimale kassile"
TODO: Should not fail.

p -cat=NP "valmim kassile"
TODO: Should fail.
